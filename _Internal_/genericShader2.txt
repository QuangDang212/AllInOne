// http://www.catalinzima.com/2012/12/a-word-on-matrices/

// We want to use the same convention as OpenGL
#pragma pack_matrix( column_major )

Texture2D txDiffuse : register( t0 );
SamplerState samDiffuse : register( s0 );
Texture2D txNormal : register( t1 );
SamplerState samNormal : register( s1 );

#define LIGHT_OMNI 0
#define LIGHT_SPOT 1

#define ATTENUATION_NONE 0
#define ATTENUATION_INVERSE 1
#define ATTENUATION_DUALRADIUS 2
#define ATTENUATION_INVERSESQUARE 3

struct _Light
{
	// You MUST NOT update this vars. Use the methods instead.
	float4 a;
	float4 b;
	float4 c;
	float4 d;
	
	// Returns World Space light's position
	float3 GetPosition()
	{
		return float3(a.x,a.y,a.z);
	}
	
	// Returns light's Color
	float4 GetColor()
	{
		return b;
	}
	
	// Returns light's range
	float GetRange()
	{
		return a.w;
	}
	
	// Returns 1.0f / light's range
	float GetRcpRange()
	{
		return c.x;
	}
	
	// Returns the attenuation mode used for this light
	float GetAttenuationMode()
	{
		return c.y;
	}
	// Returns the AttenuationStart
	float GetAttenuationStart()
	{
		return c.z;
	}
	
	float GetFallOff()
	{
		return c.w;
	}
	float GetHotSpot()
	{
		return d.w;
	}

	float3 GetDirection()
	{
		return float3(d.x,d.y,d.z);
	}
	
	// ReEturns the Light Type ( Omni, Spot)
	float GetType()
	{
		if(c.w==-99) return LIGHT_OMNI;
		
		return LIGHT_SPOT;
	}
};

cbuffer cbChangesEveryFrame : register( b0 )
{
    matrix World;
	matrix View;
	matrix Projection;
    float4 DiffuseColor;
	_Light light;
};

float4 ApplyLight(_Light light,float3 normal,float3 position)
{
	float attenuation=1.0f;
	
	float4 color=light.GetColor();
	
	float3 lightPos=light.GetPosition();

	float3 lightDir=lightPos-position;

	//color=float4(1,0,0,1);
	//normal=float3(0,0,1);
	
	float lightLength=length(lightDir);
	
	// CON ESTO NO SE VE BIEN!!
	lightDir=normalize(lightDir);
	
	float attenuationMode=light.GetAttenuationMode();
	
	if(attenuationMode==ATTENUATION_NONE)
	{
		if(lightLength>light.GetRange()) attenuation=0;
	}
	else
	if(attenuationMode==ATTENUATION_INVERSE)
	{
		attenuation -= saturate(lightLength*light.GetRcpRange());
	}
	else
	if(attenuationMode==ATTENUATION_INVERSESQUARE)
	{
		attenuation -= saturate(lightLength*light.GetRcpRange());
		
		attenuation*=attenuation;
	}
	else
	if(attenuationMode==ATTENUATION_DUALRADIUS)
	{
		attenuation -= smoothstep(light.GetAttenuationStart(),light.GetRange(),lightLength);
	}
	
	if(light.GetType() == LIGHT_SPOT)
	{
		float spot=smoothstep(light.GetFallOff(), light.GetHotSpot(), dot(-lightDir, light.GetDirection()));
		
		attenuation *= spot;
	}

	float4 finalColor=saturate( dot( lightDir,normal)) * color * attenuation;
	
	finalColor.a=1;
	return finalColor;
};

// Computes the diffuse component between the VertexNormal and the LightVector ( from point to light position)
float ComputeDiffuse(float3 Normal, float3 LightVector)
{
	return saturate(dot(Normal, LightVector));
}


struct VS_OUTPUT
{
    float4 Pos : SV_POSITION;
	float4 Color0: COLOR0;
    float2 TexDiffuse : TEXCOORD0;
	float3 Position_WorldSpace: TEXCOORD1;
	float3 Normal_WorldSpace: TEXCOORD2;
};

//--------------------------------------------------------------------------------------
// Vertex Shader
//--------------------------------------------------------------------------------------
VS_OUTPUT VS(float3 Pos0 : POSITION0,float4 VertexColor:COLOR0,float3 Normal:NORMAL,float3 Tanget:TANGENT,float2 TexCoord:TEXCOORD0)
{
   VS_OUTPUT output = (VS_OUTPUT)0;
	
	//matrix WorldViewProjection = mul(mul(World, View), Projection);
	float4 pos=float4(Pos0,1);
	
    output.Pos = mul( World,pos  );
	
	output.Position_WorldSpace =output.Pos.xyz;
	
    output.Pos = mul( View,output.Pos  );
    output.Pos = mul( Projection,output.Pos  );
	
	output.Normal_WorldSpace=mul( (float3x3)World,Normal );
	
	//output.Normal_WorldSpace=Normal;
	
	output.TexDiffuse=TexCoord;
	output.Color0=DiffuseColor*VertexColor;
	
    return output;
}


//--------------------------------------------------------------------------------------
// Pixel Shader
//--------------------------------------------------------------------------------------
float4 PS( VS_OUTPUT input) : SV_Target
{
	float4 finalColor=input.Color0*txDiffuse.Sample( samDiffuse, input.TexDiffuse );
	
	//finalColor=float4(1,0,1,1);
	
	// If alpha is==0 then this pixel must not be drawn
	if(finalColor.a==0) discard;

	float3 normal_WorldSpace=normalize(input.Normal_WorldSpace);
	
	finalColor*=ApplyLight(light,normal_WorldSpace,input.Position_WorldSpace);
	
	return finalColor;
}
