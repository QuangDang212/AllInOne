cbuffer cbChangesEveryFrame : register( b0 )
{
    float4 DiffuseColor;
	float4 Pos_SizeScreenSpace;	// z=width, w=height
	float4 UV;					// x=u1 y=v1  z=u2  w=v2
	float4 ScreenSize;
};

// The rectangle comes in this form:
// 0,0        1,0
//
// 0,1        1,1

struct VS_OUTPUT
{
    float4 Pos : SV_POSITION;
	float4 Color0: COLOR0;
    float2 TexDiffuse : TEXCOORD0;
};

float2 ScreenSpaceToClipSpace(float2 pos)
{
	float2 final;
	
	// Transform 0->Width to 0->1
	final.x=pos.x/ScreenSize.x;

	// Transform 0->Height to 1->0
	final.y=1.0f-(pos.y/ScreenSize.y);
	
	// Transform to -1 -> 1
	
	final.x=(final.x-0.5f)*2;
	final.y=(final.y-0.5f)*2;
	
	return final;
}

//--------------------------------------------------------------------------------------
// Vertex Shader
//--------------------------------------------------------------------------------------
VS_OUTPUT VS(float4 Pos0 : POSITION0,float4 Color0 : COLOR0)
{
    VS_OUTPUT output = (VS_OUTPUT)0;
	
	float2 posFinal=Pos_SizeScreenSpace.xy+(Pos0.xy*Pos_SizeScreenSpace.zw);
	
	posFinal=ScreenSpaceToClipSpace(posFinal);
	
    output.Pos = float4(posFinal,0,1);
    output.Color0 = Color0*DiffuseColor;

    return output;
}


//--------------------------------------------------------------------------------------
// Pixel Shader
//--------------------------------------------------------------------------------------
float4 PS( VS_OUTPUT input) : SV_Target
{
	return input.Color0;
}

