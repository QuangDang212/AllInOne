// http://www.catalinzima.com/2012/12/a-word-on-matrices/

// We want to use the same convention as OpenGL
#pragma pack_matrix( column_major )

Texture2D txDiffuse : register( t0 );
SamplerState samDiffuse : register( s0 );

cbuffer cbChangesEveryFrame : register( b0 )
{
    matrix World;
	matrix View;
	matrix Projection;
    float4 DiffuseColor;
};

struct VS_OUTPUT
{
    float4 Pos : SV_POSITION;
	float4 Color0: COLOR0;
    float2 TexDiffuse : TEXCOORD0;
	float3 Position_WorldSpace: TEXCOORD1;
	float3 Normal_WorldSpace: TEXCOORD2;
};

//--------------------------------------------------------------------------------------
// Vertex Shader
//--------------------------------------------------------------------------------------
VS_OUTPUT VS(float3 Pos0 : POSITION0,float3 Normal:NORMAL,float2 TexCoord:TEXCOORD0)
{
   VS_OUTPUT output = (VS_OUTPUT)0;
	
	//matrix WorldViewProjection = mul(mul(World, View), Projection);
	float4 pos=float4(Pos0,1);
	
    output.Pos = mul( World,pos  );
	
	output.Position_WorldSpace =output.Pos.xyz;
	
    output.Pos = mul( View,output.Pos  );
    output.Pos = mul( Projection,output.Pos  );
	
	output.TexDiffuse=TexCoord;
	output.Color0=DiffuseColor;
	
    return output;
}


//--------------------------------------------------------------------------------------
// Pixel Shader
//--------------------------------------------------------------------------------------
float4 PS( VS_OUTPUT input) : SV_Target
{
	float4 finalColor=input.Color0*txDiffuse.Sample( samDiffuse, input.TexDiffuse );
	
	//finalColor=float4(1,0,1,1);
	
	// If alpha is==0 then this pixel must not be drawn
	if(finalColor.a==0) discard;

	return finalColor;
}
